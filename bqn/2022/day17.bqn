Solve ⇐ {env‿part 𝕊 data :
  lib ← "." env.Var⌾⋈ "BQN_LIB"
  util‿⟨HashMap⟩‿⟨HashSet⟩ ← •Import¨"/util.bqn"‿"/hashmap.bqn"‿"/hashset.bqn"∾˜¨<lib
  "shapes" util.Debug shapes ← [
    shape0 ← <[1‿1‿1‿1]
    shape1 ← <[0‿1‿0,1‿1‿1,0‿1‿0]
    shape2 ← <[0‿0‿1,0‿0‿1,1‿1‿1]
    shape3 ← <[⟨1⟩,⟨1⟩,⟨1⟩,⟨1⟩]
    shape4 ← <[1‿1,1‿1]
  ]
  _in_ ← {𝕨 𝔽 _𝕣_ 𝔾 𝕩 : diff ← 𝕨-○(𝕗⊸⊑)𝕩 ⋄ ((diff≥⊣)∧(diff≤⊢))´𝕘}
  ! 0‿0 (0)_in_(¯2‿2) 1‿0
  Clash ← {
    0‿pos1 𝕊 0‿pos2 : (pos1(0)_in_⟨0,0⟩pos2)∧(pos1(1)_in_⟨¯3,3⟩pos2) ;
    0‿pos1 𝕊 1‿pos2 : (pos1(0)_in_⟨¯1,¯1⟩pos2)∧(pos1(1)_in_⟨¯2,3⟩pos2)∧(pos1(0)_in_⟨0,2⟩pos2)∧(pos1(1)_in_⟨0,0⟩pos2) ;
    0‿pos1 𝕊 2‿pos2 : (pos1(0)_in_⟨0,0⟩pos2)∧(pos1(1)_in_⟨¯2,3⟩pos2)∧(pos1(0)_in_⟨¯2,¯2⟩pos2)∧(pos1(1)_in_⟨0,0⟩pos2) ;
    0‿pos1 𝕊 3‿pos2 : (pos1(0)_in_⟨0,3⟩pos2)∧(pos1(1)_in_⟨0,3⟩pos2) ;
    0‿pos1 𝕊 4‿pos2 : (pos1(0)_in_⟨0,1⟩pos2)∧(pos1(1)_in_⟨¯1,3⟩pos2) ;
    1‿pos1 𝕊 1‿pos2 : @ ;
    1‿pos1 𝕊 2‿pos2 : @ ;
    1‿pos1 𝕊 3‿pos2 : @ ;
    1‿pos1 𝕊 4‿pos2 : @ ;
    2‿pos1 𝕊 2‿pos2 : @ ;
    2‿pos1 𝕊 3‿pos2 : @ ;
    2‿pos1 𝕊 4‿pos2 : @ ;
    3‿pos1 𝕊 3‿pos2 : (pos1(0)_in_⟨¯3,3⟩pos2)∧(pos1(1)_in_⟨0,0⟩pos2) ;
    3‿pos1 𝕊 4‿pos2 : (pos1(0)_in_⟨¯3,1⟩pos2)∧(pos1(1)_in_⟨¯1,0⟩pos2) ;
    4‿pos1 𝕊 4‿pos2 : (pos1(0)_in_⟨¯1,1⟩pos2)∧(pos1(1)_in_⟨¯1,1⟩pos2) ;
    𝕨 𝕊 𝕩 : 𝕩 𝕊 𝕨
  }
  "≠jetPattern" util.Debug ≠jetPattern ← (¯1‿1⊑˜'>'⊸=)¨⊑data
  0
}

