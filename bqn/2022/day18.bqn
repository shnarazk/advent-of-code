lib ‚Üê ‚Ä¢Import "../lib.bqn"

Solve ‚áê { part Solve data:
  Facets ‚Üê {x‚Äøy‚Äøz:
    [
      ‚ü®x-0.5,y,z‚ü©,‚ü®x+0.5,y,z‚ü©
      ‚ü®x,y-0.5,z‚ü©,‚ü®x,y+0.5,z‚ü©
      ‚ü®x,y,z-0.5‚ü©,‚ü®x,y,z+0.5‚ü©
    ]
  }
  "‚â†all" lib.Debug ‚â†all ‚Üê ‚•ä<Àò‚àæFacets¬® cubes ‚Üê lib.ParseInts¬®data
  { 1=part ?
      (‚â†-(2‚ä∏√ó‚àò(-‚óã‚â†‚üú‚ç∑)))all
      ;
    2=part ?
      # {
      #   "all facets" lib.Debug a ‚Üê ‚ü®‚ü®0,0‚ü©,‚ü®1,0‚ü©,‚ü®0,0‚ü©,‚ü®2,0‚ü©,‚ü®2,0‚ü©‚ü©
      #   "a's non-firsts mask" lib.Debug m ‚Üê ¬¨‚àäa
      #   "a's non-firsts" lib.Debug c ‚Üê m/a
      #   "remains" lib.Debug (¬¨a‚àäc)/a
      #   !0
      # }
      "5‚Üëdup faces" lib.Debug 5‚Üëdup ‚Üê (¬¨‚àä)‚ä∏/all
      # Change to a directed space
      Lift ‚Üê {ùïä x‚Äøy‚Äøz :
        {
          x‚â†‚åäx ? ‚ü®x+0.5,y,z,3‚ü©‚Äø‚ü®x-0.5,y,z,2‚ü© ;
          y‚â†‚åäy ? ‚ü®x,y+0.5,z,5‚ü©‚Äø‚ü®x,y-0.5,z,4‚ü© ;
          z‚â†‚åäz ? ‚ü®x,y,z+0.5,7‚ü©‚Äø‚ü®x,y,z-0.5,6‚ü© ;
          !0
        }
      }
      DirectedFacets ‚Üê ‚àæ¬®‚üú(2+‚Üï6)<
      "5‚Üëdir¬Øall" lib.Debug 5‚Üëdir¬Øall ‚Üê ‚àæDirectedFacets¬® lib.ParseInts¬®data
      "‚â†mask" lib.Debug +¬¥mask ‚Üê dir¬Øall‚àä‚àæLift¬® dup
      "‚â†surface" lib.Debug ‚â†surface ‚Üê (¬¨mask)/dir¬Øall
      !0
      Adjacent ‚Üê {aùïäb:
        { 1‚Äø¬Ø1‚Äø0‚â°b-‚óã(3‚ä∏‚Üë)a ? lib.Debug a‚Äøb; @}
        {
          ùïä ‚ü® 0, 0, 1‚ü©: (a=‚óã(3‚ä∏‚äë)b)‚àß1‚â†‚åä2√∑‚Åº3‚äëa;
          ùïä ‚ü® 0, 0,¬Ø1‚ü©: (a=‚óã(3‚ä∏‚äë)b)‚àß1‚â†‚åä2√∑‚Åº3‚äëa;
          ùïä ‚ü® 0, 1, 0‚ü©: (a=‚óã(3‚ä∏‚äë)b)‚àß2‚â†‚åä2√∑‚Åº3‚äëa;
          ùïä ‚ü® 0,¬Ø1, 0‚ü©: (a=‚óã(3‚ä∏‚äë)b)‚àß2‚â†‚åä2√∑‚Åº3‚äëa;
          ùïä ‚ü® 1, 0, 0‚ü©: (a=‚óã(3‚ä∏‚äë)b)‚àß3‚â†‚åä2√∑‚Åº3‚äëa;
          ùïä ‚ü®¬Ø1, 0, 0‚ü©: (a=‚óã(3‚ä∏‚äë)b)‚àß3‚â†‚åä2√∑‚Åº3‚äëa;

          ùïä ‚ü® 0, 1, 1‚ü©: 3‚Äø2‚â°a‚àæ‚óã(3‚ä∏‚äë)b;
          ùïä ‚ü® 0, 1,¬Ø1‚ü©: 4‚Äø2‚â°a‚àæ‚óã(3‚ä∏‚äë)b;
          ùïä ‚ü® 0,¬Ø1, 1‚ü©: 3‚Äø1‚â°a‚àæ‚óã(3‚ä∏‚äë)b;
          ùïä ‚ü® 0,¬Ø1,¬Ø1‚ü©: 4‚Äø1‚â°a‚àæ‚óã(3‚ä∏‚äë)b;

          ùïä ‚ü® 1, 0, 1‚ü©: 5‚Äø2‚â°a‚àæ‚óã(3‚ä∏‚äë)b;
          ùïä ‚ü® 1, 0,¬Ø1‚ü©: 5‚Äø1‚â°a‚àæ‚óã(3‚ä∏‚äë)b;
          ùïä ‚ü®¬Ø1, 0, 1‚ü©: 5‚Äø1‚â°a‚àæ‚óã(3‚ä∏‚äë)b;
          ùïä ‚ü®¬Ø1, 0,¬Ø1‚ü©: 6‚Äø1‚â°a‚àæ‚óã(3‚ä∏‚äë)b;

          ùïä ‚ü® 1, 1, 0‚ü©: 5‚Äø4‚â°a‚àæ‚óã(3‚ä∏‚äë)b;
          ùïä ‚ü® 1,¬Ø1, 0‚ü©: 5‚Äø3‚â°a‚àæ‚óã(3‚ä∏‚äë)b; # !!
          ùïä ‚ü®¬Ø1, 1, 0‚ü©: 6‚Äø4‚â°a‚àæ‚óã(3‚ä∏‚äë)b;
          ùïä ‚ü®¬Ø1,¬Ø1, 0‚ü©: 6‚Äø3‚â°a‚àæ‚óã(3‚ä∏‚äë)b;
          ùïä          ùï©: 0
        } b-‚óã(3‚ä∏‚Üë)a
      }
      ! 0‚Äø0‚Äø0‚Äø5 Adjacent 1‚Äø¬Ø1‚Äø0‚Äø3
      "outers" lib.Debug ‚â†out ‚Üê ‚ü®‚ü© {
        checked Rec ‚ü®‚ü©‚Äøremain: checked;
        checked Rec new‚Äøremain:
          "‚â†remain" lib.Debug ‚â†remain
          match ‚Üê {‚à®¬¥new Adjacent¬®<ùï©}¬®remain
          "new" lib.Debug match
          (checked‚àænew) Rec match ‚äî remain;
        checked Rec new: checked‚àænew
      } 1(‚Üë‚ãà‚Üì)surface
    ;
      ‚ü®1 Solve data, 2 Solve data‚ü©
  }
}
